using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using static System.Net.Mime.MediaTypeNames;

namespace SmartExpense {
    public class Expense {
        public decimal Amount { get; set; }
        public string Description { get; set; }
        public DateTime Date { get; set; }
        public string Category { get; set; }

        public Expense(decimal amount, string description, DateTime date, string category) {
            this.Amount = amount;
            this.Description = description;
            this.Date = date;
            this.Category = category;
        }

        public Expense() { }
    }

    public class ExpenseData {
        public string Label { get; set; }
        public string Text { get; set; }

        public ExpenseData(string Label, string Text) {
            this.Text = Text;
            this.Label = Label;
        }
    }

    public class DBG {
        string filePath = "DBG_output.txt";

        public void Out(List<ExpenseData> data) {
            using (StreamWriter sw = new StreamWriter(filePath, false)) {
                foreach (var val in data) {
                    sw.WriteLine("Label : " + val.Label + " - Text: " + val.Text);
                }
            }
            MessageBox.Show($"Đã xuất dữ liệu ra: {filePath}");
        }

        public void Out(List<string> data) {
            using (StreamWriter sw = new StreamWriter(filePath, false)) {
                foreach (var val in data) {
                    sw.WriteLine(val);
                }
            }
            MessageBox.Show($"Đã xuất dữ liệu ra: {filePath}");
        }

    }

    public interface IExpenseClassifer {
        string Classify(string description);
    }

    public class RuleBasedClassifier : IExpenseClassifer {
        public Dictionary<string, string[]> rules = new Dictionary<string, string[]> {
            {"Ăn Uống", new string[] {"ăn", "uống", "cơm", "cà phê", "trà", "nước"} },
            {"Mua Sắm", new string[] {"mua", "giày", "quần", "áo", "Shoppe", "Tiki", "Lazada", "Tiktok"} },
            {"Giải Trí", new string[] {"xem", "phim", "game", "hát", "nhạc" } },
        };

        public string Classify(string description) {
            description = description.ToLower();

            foreach (var rule in rules) {
                foreach (var keyword in rule.Value) {
                    if (description.Contains(keyword)) {
                        return rule.Key;
                    }
                }
            }
            return "Continue";
        }
    }

    public class LogicsticRegression : IExpenseClassifer {
        private List<ExpenseData> trainingData = new List<ExpenseData>();
        private List<string> vocabulary = new List<string>();
        private List<List<int>> X = new List<List<int>>();
        private List<string> y = new List<string>();

        public List<ExpenseData> LoadFromCsv(string filePath) {
            List<ExpenseData> data = new List<ExpenseData>();

            string[] lines = File.ReadAllLines(filePath);

            for (int i = 1; i < lines.Length; ++i) {
                string line = lines[i];
                string[] parts = line.Split(',');

                if (parts.Length >= 2) {
                    data.Add(new ExpenseData(parts[0].Trim(), parts[1].Trim()));
                }
            }
            return data;
        }

        public void LoadTrainingData() {
            Vietnamese vietnamese = new Vietnamese();

            List<ExpenseData> data1 = this.LoadFromCsv("Data/anuong.csv").Select(des => new ExpenseData(des.Label, vietnamese.RemoveDiacritics(des.Text))).ToList();
            List<ExpenseData> data2 = this.LoadFromCsv("Data/muasam.csv").Select(des => new ExpenseData(des.Label, vietnamese.RemoveDiacritics(des.Text))).ToList();
            List<ExpenseData> data3 = this.LoadFromCsv("Data/giaitri.csv").Select(des => new ExpenseData(des.Label, vietnamese.RemoveDiacritics(des.Text))).ToList();
            List<ExpenseData> data4 = this.LoadFromCsv("Data/khac.csv").Select(des => new ExpenseData(des.Label, vietnamese.RemoveDiacritics(des.Text))).ToList();

            DBG dbg = new DBG();
            //dbg.Out(data1);

            trainingData.AddRange(data1);
            trainingData.AddRange(data2);
            trainingData.AddRange(data3);
            trainingData.AddRange(data4);

            TextVectorizer vectorizer = new TextVectorizer();
            //vectorizer.Train(trainingData);

            dbg.Out(vectorizer.getVocabulary());
            //List<string> test = new List<string> { "an com", "mua ao", "xem phim", "an ca", "mua giay" };
        }

        public class TextVectorizer {
            public List<string> vocabulary = new List<string>();

            public List<string> getVocabulary() {
                return vocabulary;
            }

            public List<string> setVocabulary(List<string> vocab) {
                this.vocabulary = vocab;
                return vocabulary;
            }

            //public void CollectWords(List<string> data) {
            //    foreach (var val in data) {
            //        string[] words = val.Split(' ', StringSplitOptions.RemoveEmptyEntries);

            //        foreach (var word in words) {
            //            if (!vocabulary.Contains(word)) {
            //                vocabulary.Add(word);
            //            }
            //        }
            //    }
            //}
        }

        public void Train(List<ExpenseData> data) {
            trainingData = data;

            foreach (var val in data) {
                string[] words = val.Text.Split(' ', StringSplitOptions.RemoveEmptyEntries);

                foreach (var word in words) {
                    string w = word.ToLower();
                    if (!vocabulary.Contains(w)) {
                        vocabulary.Add(w);
                    }
                }
            }

            foreach (var val in trainingData) {
                List<int> tmp = new List<int>();
                string[] words = val.Text.Split(' ', StringSplitOptions.RemoveEmptyEntries);

                foreach (var vocaWord in vocabulary) {
                    tmp.Add(words.Contains(vocaWord) ? 1 : 0);
                }

                X.Add(tmp);
                y.Add(val.Label);
            }
        }

        public string Classify(string description) {
            return "Khác";
        }
    }

    public class ExpensePredictor {
        private List<IExpenseClassifer> classifers;

        public ExpensePredictor(List<IExpenseClassifer> classifers) {
            this.classifers = classifers;
        }

        public string Predict(string description) {
            foreach (var classifer in classifers) {
                string ans = classifer.Classify(description);
                if (ans != "Khác")
                    return ans;
            }
            return "Khác";
        }
    }

    public class ExpenseManager {
        private List<Expense> expenses = new List<Expense>();
        private string filePath = "expenses.json";

        public List<Expense> Expenses => expenses;

        public void AddExpense(Expense expense) {
            expenses.Add(expense);
            SaveExpensesToFile();
        }

        public decimal GetTotal() {
            return Expenses.Sum(x => x.Amount);
        }

        public void SaveExpensesToFile() {
            string json = JsonSerializer.Serialize(expenses, new JsonSerializerOptions { WriteIndented = true });
            File.WriteAllText(filePath, json);
        }

        public void LoadExpensesFromFile() {
            if (File.Exists(filePath)) {
                string json = File.ReadAllText(filePath);
                expenses = JsonSerializer.Deserialize<List<Expense>>(json);
            }
        }


    }

}
